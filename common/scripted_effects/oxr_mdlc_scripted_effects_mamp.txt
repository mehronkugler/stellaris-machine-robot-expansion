@oxr_mdlc_mamp_cat_1_build_days = 60

## Used in the last event of the cat1 species series
create_mamp_cat1_species = {
	create_species = {
		name = "NAME_Mamp_Cat1"
		plural = "NAME_Robot_plural"
		class = OXR_MDLC_MAMP_CAT1_SPECIES
		namelist = "AI"
		portrait = "default_robot"
		traits = {
			trait = "oxr_mdlc_mamp_frame_base"
			trait = "oxr_mdlc_mamp_frame_1"
			trait = "trait_machine_unit"
		}
		homeworld = this.capital_scope
		allow_negative_traits = no
		effect = {
			# set_species_flag = mechanical_species@prev
			oxr_mdlc_set_custom_species_habitability = yes
			if = {
				limit = {
					prev = { use_robot_portrait_sd_hum_robot = yes }
				}
				change_species_portrait = sd_hum_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_mam_robot = yes }
				}
				change_species_portrait = sd_mam_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_rep_robot = yes }
				}
				change_species_portrait = sd_rep_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_avi_robot = yes }
				}
				change_species_portrait = sd_avi_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_art_robot = yes }
				}
				change_species_portrait = sd_art_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_mol_robot = yes }
				}
				change_species_portrait = sd_mol_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_fun_robot = yes }
				}
				change_species_portrait = sd_fun_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_pla_robot = yes }
				}
				change_species_portrait = sd_pla_robot
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_lit_robot = yes }
				}
				change_species_portrait = lith_machine
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_nec_robot = yes }
				}
				change_species_portrait = nec_machine
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_aqu_robot = yes }
				}
				change_species_portrait = aqu_machine
			}
			else_if = {
				limit = {
					prev = { use_robot_portrait_sd_tox_robot = yes }
				}
				change_species_portrait = tox_machine
			}
		}
	}
	last_created_species = {
		save_global_event_target_as = oxr_mdlc_mamp_cat_1_pop_species
	}
	set_built_species = last_created_species
}
# Used by auto-construction
oxr_mdlc_mamp_create_cat1_from_pop_on_planet = {
	# Planetary Scope. Trigger has already checked if we are OK to build a pop.
	# Kill 1 pop now, build the mamp species in 60 days
	random_owned_pop = {
		limit = {
			species = {
				is_archetype = MACHINE
				NOT = { is_archetype = OXR_MDLC_MAMP }
			}
		}
		kill_pop = yes
	}
	planet_event = {
		id = oxr_mdlc_mamp.100
		days = @oxr_mdlc_mamp_cat_1_build_days
	}
}

oxr_mdlc_mamp_empire_start_auto_construction = {
	# Called when auto-construction has been activated
	set_country_flag = oxr_mdlc_mamp_empire_auto_construction_active
	every_owned_planet = {
		limit = {
			oxr_mdlc_mamp_planet_has_mamp_buildings = yes
		}
		if = {
			# Set the flag that says "auto construction is on"
			limit = {
				NOT = { has_planet_flag = oxr_mdlc_mamp_auto_construction_enabled }
			}
			set_planet_flag = oxr_mdlc_mamp_auto_construction_enabled
		}
		if = {
			limit = { 
				oxr_mdlc_mamp_planet_can_auto_construct_frames = yes
				oxr_mdlc_mamp_planet_is_currently_constructing_mamp = no
				from = {
					oxr_mdlc_mamp_empire_can_afford_cat_1 = yes
				}
			}
			# Set flag and trigger construction
			# Flag is used for monthly pulse to check whether to try creating another mamp
			log = "Would start auto construction of MAMPs on planet [This.GetName]"
			oxr_mdlc_mamp_planet_start_auto_construction = yes
		}
	}
	# Start an event loop that happens every 60 days
	country_event = {
		id = oxr_mdlc_mamp.200
		days = 60
	}
}
oxr_mdlc_mamp_empire_continuously_trigger_auto_construction = {
	# Call AFTER auto-construction has been enabled empire-wide, each month
	every_owned_planet = {
		limit = {
			oxr_mdlc_mamp_planet_has_mamp_buildings = yes
		}
		if = {
			# Set the flag that says "auto construction is on"
			limit = {
				NOT = { has_planet_flag = oxr_mdlc_mamp_auto_construction_enabled }
			}
			set_planet_flag = oxr_mdlc_mamp_auto_construction_enabled
		}
		if = {
			limit = { 
				oxr_mdlc_mamp_planet_can_auto_construct_frames = yes
				oxr_mdlc_mamp_planet_is_currently_constructing_mamp = no
				from = {
					oxr_mdlc_mamp_empire_can_afford_cat_1 = yes
				}
			}
			# Set flag and trigger construction
			# Flag is used for monthly pulse to check whether to try creating another mamp
			log = "Would start auto construction of MAMPs on planet [This.GetName]"
			oxr_mdlc_mamp_planet_start_auto_construction = yes
		}
	}
}


oxr_mdlc_mamp_empire_stop_auto_construction = {
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_enabled
	every_owned_planet = {
		limit = {
			has_planet_flag = oxr_mdlc_mamp_auto_construction_enabled
		}
		remove_planet_flag = oxr_mdlc_mamp_auto_construction_enabled
	}
}
oxr_mdlc_mamp_planet_stop_auto_construction = {
	remove_planet_flag = oxr_mdlc_mamp_auto_construction_enabled
}
oxr_mdlc_mamp_planet_start_auto_construction = {
	if = {
		limit = {
			oxr_mdlc_mamp_planet_can_auto_construct_frames = yes
			from = {
				oxr_mdlc_mamp_empire_can_afford_cat_1 = yes
			}
		}
		# Kill a pop now, and in 45 days, create a MAMP species
		random_owned_pop = {
			limit = {
				species = {
					is_archetype = MACHINE
					NOT = { is_archetype = OXR_MDLC_MAMP }
				}
			}
			kill_pop = yes
		}
		add_modifier = {
			modifier = oxr_mdlc_mamp_auto_construction_active_cat_1
			days = 60
		}
	}
}
# To be used by players, manually, at the planet-level
oxr_mdlc_mamp_planet_disable_auto_construction = {
	remove_planet_flag = oxr_mdlc_mamp_auto_construction_enabled
	set_planet_flag = oxr_mdlc_mamp_auto_construction_disabled
}
oxr_mdlc_mamp_planet_enable_auto_construction = {
	set_planet_flag = oxr_mdlc_mamp_auto_construction_enabled
	remove_planet_flag = oxr_mdlc_mamp_auto_construction_disabled
}

oxr_mdlc_mamp_empire_auto_construction_select_cat_1 = {
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_2
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_3
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_best
	set_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_1
}
oxr_mdlc_mamp_empire_auto_construction_select_cat_2 = {
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_1
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_3
	remove_country_flag =  oxr_mdlc_mamp_empire_auto_construction_select_best
	set_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_2
}
oxr_mdlc_mamp_empire_auto_construction_select_cat_3 = {
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_1
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_2
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_best
	set_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_3
}
oxr_mdlc_mamp_empire_auto_construction_select_best = {
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_1
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_2
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_3
	set_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_best
}
oxr_mdlc_mamp_empire_auto_construction_select_none = {
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_1
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_2
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_cat_3
	remove_country_flag = oxr_mdlc_mamp_empire_auto_construction_select_best
}
oxr_mdlc_origin_world_machine_awakened_game_start_setup = {
	# optimize_memory
	prev = { set_country_flag = oxr_mdlc_origin_world_machine_awakened }
	export_trigger_value_to_variable = {
		trigger = num_districts
		parameters = { type = any }
		variable = num_starting_districts
	}

	# Swap in districts
	while = {
		limit = { has_district = district_city }
		remove_district = district_city
		# add_district = xvcv_mdlc_pc_machine_auto_district_nexus
		add_district = xvcv_mdlc_pc_machine_auto_district_mining
	}
	while = {
		limit = { has_district = district_nexus }
		remove_district = district_nexus
		add_district = xvcv_mdlc_pc_machine_auto_district_mining
	}
	while = {
		limit = { has_district = district_generator }
		remove_district = district_generator
		add_district = xvcv_mdlc_pc_machine_auto_district_generator
	}
	while = {
		limit = { has_district = district_mining }
		remove_district = district_mining
		add_district = xvcv_mdlc_pc_machine_auto_district_mining
	}
	while = {
		limit = { has_district = xvcv_mdlc_common_district_mining }
		remove_district = xvcv_mdlc_common_district_mining
		add_district = xvcv_mdlc_pc_machine_auto_district_mining
	}

	# Have a check here that looks whether the empire uses food.
	# If not, convert these to generator
	while = {
		limit = { has_district = district_farming }
		remove_district = district_farming
		add_district = xvcv_mdlc_pc_machine_auto_district_farming
	}
	while = {
		limit = { has_district = district_industrial }
		remove_district = district_industrial
		add_district = xvcv_mdlc_pc_machine_auto_district_industrial
	}
	# Note the difference in starting vs now
	export_trigger_value_to_variable = {
		trigger = num_districts
		parameters = { type = any }
		variable = num_ending_districts
	}
	set_variable = {
		which = starting_districts_difference
		value = num_starting_districts
	}
	subtract_variable = {
		which = starting_districts_difference
		value = num_ending_districts
	}
	log = "Starting districts: \\[This.num_starting_districts]. End with \\[This.num_ending_districts]. Difference \\[This.starting_districts_difference]"
	clear_variable = num_starting_districts
	clear_variable = num_ending_districts
	clear_variable = starting_districts_difference


	# Trim population
	while = {
		limit = {
			num_pops > 3
		}
		random_owned_pop = {
			kill_pop = yes
			owner = { add_resource = { alloys = 75 } }
		}
	}
	log = "Reduced starting population to 3"

	# Stop pop assembly
	add_modifier = { modifier = "planet_population_control_gestalt" days = -1 }

	# Add blockers to homeworld
	# First get rid of game-generated blockers & deposits
	clear_blockers = yes
	clear_deposits = yes
	oxr_mdlc_origin_world_machine_random_add_all_blockers = yes

	# Set up first digsite
	# Always guarantee this charge controller deposit is present.
	# from here, on_action will add more dig sites.
	# By starting the player from here, it will ensure the first digsite is not an insight blocker
	if = {
		limit = {
			has_deposit = oxr_mdlc_d_world_machine_collapsed_charge_controller
		}
		create_archaeological_site = oxr_mdlc_collapsed_charge_controller_site
	}
	else = {
		add_blocker = { type = oxr_mdlc_d_world_machine_collapsed_charge_controller }
		create_archaeological_site = oxr_mdlc_collapsed_charge_controller_site
	}

	# Install world machine core
	add_deposit = oxr_mdlc_d_world_machine_core

	# give_technology
	give_technology = {
		tech = oxr_mdlc_tech_world_machines_unlocked
		message = no
	}

	# Start "recover lost tech" situation
	prev = {
		begin_event_chain = {
			event_chain = oxr_mdlc_origin_wm_discovery
		}
		begin_event_chain = {
			event_chain = oxr_mdlc_origin_wm_recover_core_tech
		}
		begin_event_chain = {
			event_chain = oxr_mdlc_origin_wm_our_origins
		}
	}

	## Swap buildings
	### Unity
	while = {
		limit = { has_building = building_uplink_node }
		remove_building = building_uplink_node
		add_building = oxr_mdlc_world_machines_building_cohesion_supervisor
	}
	### Research
	while = {
		limit = { has_building = building_research_lab_1 }
		remove_building = building_research_lab_1
		add_building = oxr_mdlc_world_machines_building_fractal_sanitizer
	}
	### Military
	while = {
		limit = { has_building = building_military_academy }
		remove_building = building_military_academy
		add_building = oxr_mdlc_world_machines_building_maintenance_legion
	}
	### Roleplaying
	add_building = oxr_mdlc_world_machines_building_storage_cradle
	ruin_building = oxr_mdlc_world_machines_building_storage_cradle

	# Add armies! there should be a few districts already
	oxr_mdlc_origin_world_machine_add_armies_at_start = yes

	# Fix founder species habitability *eyeroll*
	# STILL NOT FIXED? >:O
	event_target:last_created_species = {
		if = {
			limit = { has_trait = trait_wet_planet_preference }
			change_species_characteristics = { remove_trait = trait_wet_planet_preference }
		}
		else_if = {
			limit = { has_trait = trait_dry_planet_preference }
			change_species_characteristics = { remove_trait = trait_dry_planet_preference }
		}
		else_if = {
			limit = { has_trait = trait_frozen_planet_preference }
			change_species_characteristics = { remove_trait = trait_frozen_planet_preference }
		}
		change_species_characteristics = {
			add_trait = trait_oxr_mdlc_pc_auto_world_specialist_preference
			add_traits_at_start_of_list = yes
		}
	}

}

oxr_mdlc_origin_world_machine_random_add_all_blockers = {
	# Randomly add some easy, normal, and rare blockers to a world machine
	# when it is constructed or spawned/discovered
	oxr_mdlc_origin_world_machine_add_random_simple_blockers = yes
	oxr_mdlc_origin_world_machine_add_random_normal_blockers = yes
	oxr_mdlc_origin_world_machine_add_random_insight_blockers = yes
}

oxr_mdlc_origin_world_machine_add_simple_blocker = {
	random_list = {
		20 = {
			add_blocker = { type = oxr_mdlc_d_world_machine_collapsed_charge_controller }
		}
		20 = {
			add_blocker = { type = oxr_mdlc_d_world_machine_flooded_borehole }
		}
		20 = {
			add_blocker = { type = oxr_mdlc_d_world_machine_fossilized_nutrient_bog }
		}
		20 = {
			add_blocker = { type = oxr_mdlc_d_world_machine_clogged_furnace_discharge }
		}
		20 = {
			add_blocker = { type = oxr_mdlc_d_world_machine_irradiated_drone_storage }
		}
	}
}

oxr_mdlc_origin_world_machine_add_normal_blocker = {
	# normal blockers
	random_list = {
		25 = {
			add_blocker = { type = oxr_mdlc_d_world_machine_meteor_shower_impacts }
		}
		25 = {
			add_blocker = { type = oxr_mdlc_d_world_machine_collapsed_transportation_hubs }
		}
		25 = {
			add_blocker = { type = oxr_mdlc_d_world_machine_exposed_structural_chasms }
		}
		25 = {
			add_blocker = { type = oxr_mdlc_d_world_machine_dense_geologic_mass }
		}
	}
}

oxr_mdlc_origin_world_machine_add_insight_blocker = {
	# hard / insight blockers
	random_list = {
		25 = {
			add_blocker = { type = oxr_mdlc_d_world_machine_offline_data_routers }
		}
		25 = {
			add_blocker = { type = oxr_mdlc_d_world_machine_damaged_data_cold_storages }
		}
		25 = {
			add_blocker = { type = oxr_mdlc_d_world_machine_frozen_waterway_pistons }
		}
		25 = {
			add_blocker = { type = oxr_mdlc_d_world_machine_incomplete_construction_bays }
		}
	}
}

oxr_mdlc_origin_world_machine_add_random_simple_blockers = {
	set_variable_to_random_value = {
		which = oxr_mdlc_world_machine_random_blockers
		min = 2 max = 4
	}
	while = {
		limit = {
			check_variable = {
				which = oxr_mdlc_world_machine_random_blockers
				value > 0
			}
		}
		subtract_variable = {
			which = oxr_mdlc_world_machine_random_blockers
			value = 1
		}
		oxr_mdlc_origin_world_machine_add_simple_blocker = yes
	}
	clear_variable = oxr_mdlc_world_machine_random_blockers
}

oxr_mdlc_origin_world_machine_add_random_normal_blockers = {
	set_variable_to_random_value = {
		which = oxr_mdlc_world_machine_random_blockers
		min = 2 max = 2
	}
	while = {
		limit = {
			check_variable = {
				which = oxr_mdlc_world_machine_random_blockers
				value > 0
			}
		}
		subtract_variable = {
			which = oxr_mdlc_world_machine_random_blockers
			value = 1
		}
		oxr_mdlc_origin_world_machine_add_normal_blocker = yes
	}
	clear_variable = oxr_mdlc_world_machine_random_blockers
}

oxr_mdlc_origin_world_machine_add_random_insight_blockers = {
	set_variable_to_random_value = {
		which = oxr_mdlc_world_machine_random_blockers
		min = 1 max = 2
	}
	while = {
		limit = {
			check_variable = {
				which = oxr_mdlc_world_machine_random_blockers
				value > 0
			}
		}
		subtract_variable = {
			which = oxr_mdlc_world_machine_random_blockers
			value = 1
		}
		oxr_mdlc_origin_world_machine_add_insight_blocker = yes
	}
	clear_variable = oxr_mdlc_world_machine_random_blockers
}

### ARMY ###
oxr_mdlc_origin_world_machine_add_district_defense_army_t1 = {
	create_army = {
		owner = THIS
		type = oxr_mdlc_world_machine_district_defense_army
		name = "NAME_oxr_mdlc_world_machine_district_defense_army"
	}
}

oxr_mdlc_origin_world_machine_add_armies_at_start = {
	# Call at planet scope
	export_trigger_value_to_variable = {
		trigger = num_districts
		parameters = { type = any }
		variable = oxr_mdlc_world_machine_starting_army_count
	}
	log = "Going to add \\[This.oxr_mdlc_world_machine_starting_army_count] district defense armies."
	while = {
		limit = {
			check_variable = {
				which = oxr_mdlc_world_machine_starting_army_count
				value > 0
			}
		}
		# Make 2 defense armies per district
		# Later, this will be controlled by a var and can be increased
		oxr_mdlc_origin_world_machine_add_district_defense_army_t1 = yes
		oxr_mdlc_origin_world_machine_add_district_defense_army_t1 = yes
		subtract_variable = {
			which = oxr_mdlc_world_machine_starting_army_count
			value = 1
		}
	}
	clear_variable = oxr_mdlc_world_machine_starting_army_count
}

oxr_mdlc_origin_world_machine_refill_armies = {
	# After an invasion, see if some district armies got destroyed,
	# And regenerate those that got destroyed
	# THE PLAN:
	# 1. Count districts
	# 2. Multiply by 2
	# 3. Count existing DISTRICT DEFENSE armies
	# 4. Find the difference between (districts * 2) and num armies
	# 5. Create that many armies
	# TODO: Update the parameters when new district army types are added
	export_trigger_value_to_variable = {
		trigger = num_districts
		parameters = { type = any }
		variable = oxr_mdlc_world_machine_num_districts
	}
	export_trigger_value_to_variable = {
		trigger = count_planet_army
		parameters = {
			exists = owner
			army_type = oxr_mdlc_world_machine_district_defense_army
		}
		variable = oxr_mdlc_world_machine_num_existing_district_armies
	}
	log = "Found \\[This.oxr_mdlc_world_machine_num_existing_district_armies] district armies on the planet."
	set_variable = {
		which = oxr_mdlc_world_machines_num_armies_to_restock
		value = oxr_mdlc_world_machine_num_districts
	}
	multiply_variable = {
		which = oxr_mdlc_world_machines_num_armies_to_restock
		value = 2
	}
	subtract_variable = {
		which = oxr_mdlc_world_machines_num_armies_to_restock
		value = oxr_mdlc_world_machine_num_existing_district_armies
	}
	# Loop and count down, creating armies
	log = "After mathing, we will restock \\[This.oxr_mdlc_world_machines_num_armies_to_restock], because there are \\[This.oxr_mdlc_world_machine_num_districts] districts active, times 2, minus existing armies."
	while = {
		limit = {
			check_variable = {
				which = oxr_mdlc_world_machines_num_armies_to_restock
				value > 0
			}
		}
		# Make 2 defense armies per district
		# Later, this will be controlled by a var and can be increased
		oxr_mdlc_origin_world_machine_add_district_defense_army_t1 = yes
		subtract_variable = {
			which = oxr_mdlc_world_machines_num_armies_to_restock
			value = 1
		}
	}
	clear_variable = oxr_mdlc_world_machine_num_districts
	clear_variable = oxr_mdlc_world_machine_num_existing_district_armies
	clear_variable = oxr_mdlc_world_machines_num_armies_to_restock
}

### ARC SITE ###
oxr_mdlc_origin_world_machine_create_digsite_for_blocker = {
	# Iterate through each special blocker type, and make a dig site
	# unless the player has the tech for unblocking them
	# use else-if and not switch to ensure 1 dig at a time is created

	random_deposit = {
		limit = {
			is_blocker = yes
		}
		if = {
			limit = { is_deposit_type = oxr_mdlc_d_world_machine_collapsed_charge_controller }
			this.planet = { create_archaeological_site = oxr_mdlc_collapsed_charge_controller_site }
			log = "Created collapsed_charge_controller digsite on \\[This.planet.GetName]"
		}
		else_if = {
			limit = { is_deposit_type = oxr_mdlc_d_world_machine_flooded_borehole }
			this.planet = { create_archaeological_site = oxr_mdlc_world_machine_flooded_borehole_site }
			log = "Created flooded_borehole digsite on \\[This.planet.GetName]"
		}
		else_if = {
			limit = { is_deposit_type = oxr_mdlc_d_world_machine_fossilized_nutrient_bog }
			this.planet = { create_archaeological_site = oxr_mdlc_fossilized_nutrient_bog_site }
			log = "Created fossilized_nutrient_bog digsite on \\[This.planet.GetName]"
		}
		else_if = {
			limit = { is_deposit_type = oxr_mdlc_d_world_machine_clogged_furnace_discharge }
			this.planet = { create_archaeological_site = oxr_mdlc_world_machine_clogged_furnace_discharge_site }
			log = "Created clogged_furnace_discharge digsite on \\[This.planet.GetName]"
		}
		else_if = {
			limit = { is_deposit_type = oxr_mdlc_d_world_machine_irradiated_drone_storage }
			this.planet = { create_archaeological_site = oxr_mdlc_world_machine_irradiated_drone_storage_site }
			log = "Created irradiated_drone_storage digsite on \\[This.planet.GetName]"
		}
		else_if = {
			limit = { is_deposit_type = oxr_mdlc_d_world_machine_meteor_shower_impacts }
			this.planet = { create_archaeological_site = oxr_mdlc_world_machine_meteor_shower_impacts_site }
			log = "Created meteor_shower_impacts digsite on \\[This.planet.GetName]"
		}
		else_if = {
			limit = { is_deposit_type = oxr_mdlc_d_world_machine_collapsed_transportation_hubs }
			this.planet = { create_archaeological_site = oxr_mdlc_world_machine_collapsed_transportation_hubs_site }
			log = "Created collapsed_transportation_hubs digsite on \\[This.planet.GetName]"
		}
		else_if = {
			limit = { is_deposit_type = oxr_mdlc_d_world_machine_exposed_structural_chasms }
			this.planet = { create_archaeological_site = oxr_mdlc_world_machine_exposed_structural_chasms_site }
			log = "Created exposed_structural_chasms digsite on \\[This.planet.GetName]"
		}
		else_if = {
			limit = { is_deposit_type = oxr_mdlc_d_world_machine_dense_geologic_mass }
			this.planet = { create_archaeological_site = oxr_mdlc_world_machine_dense_geologic_mass_site }
			log = "Created dense_geologic_mass digsite on \\[This.planet.GetName]"
		}
		else_if = {
			limit = { is_deposit_type = oxr_mdlc_d_world_machine_offline_data_routers }
			this.planet = { create_archaeological_site = oxr_mdlc_world_machine_offline_data_routers_site }
			log = "Created offline_data_routers digsite on \\[This.planet.GetName]"
		}
		else_if = {
			limit = { is_deposit_type = oxr_mdlc_d_world_machine_damaged_data_cold_storages }
			this.planet = { create_archaeological_site = oxr_mdlc_world_machine_damaged_data_cold_storages_site }
			log = "Created data_cold_storages digsite on \\[This.planet.GetName]"
		}
		else_if = {
			limit = { is_deposit_type = oxr_mdlc_d_world_machine_frozen_waterway_pistons }
			this.planet = { create_archaeological_site = oxr_mdlc_world_machine_frozen_waterway_pistons_site }
			log = "Created frozen_waterway_pistons digsite on \\[This.planet.GetName]"
		}
		else = {
			log = "Didnt find a matching deposit for this deposit: \\[This.GetName]"
		}
	}
}

# oxr_mdlc_origin_world_machine_finish_digsite_blocker = {
# 	# Must call in from.planet scope
# 	every_deposit = {
# 		limit = { is_deposit_type = oxr_mdlc_d_world_machine_$TYPE$ }
# 		clear_blocker = yes
# 	}
# 	every_archaeological_site = {
# 		limit = { is_site_type = oxr_mdlc_$TYPE$_site }
# 		destroy_archaeological_site = this
# 	}
# }

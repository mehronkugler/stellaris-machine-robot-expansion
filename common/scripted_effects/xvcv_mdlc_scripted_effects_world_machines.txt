xvcv_mdlc_world_machines_output_value_calc_effect = {
	optimize_memory
	#for 'xvcv_mdlc_world_machines_districts_heat_indicator_tooltip' tooltips too
	# BROKEN as of 3.12.* #
	# export_modifier_to_variable = {
	# 	modifier = xvcv_mdlc_world_machines_districts_produces_mult
	# 	variable = xvcv_mdlc_world_machines_districts_output_var
	# }
	# END BROKEN #

	# New stuff to deal with export modifier bug in 3.12.*
	xvcv_mdlc_count_districts_calculate_output_display_var = yes
	# end new stuff
	# **pets old stuff kindly to try and keep it from breaking ** #
	xvcv_mdlc_world_machines_districts_heat_indicators_calc_effect = yes
}
xvcv_mdlc_world_machines_districts_heat_indicators_calc_effect = {
	optimize_memory
	log = "Going into xvcv_mdlc_world_machines_districts_heat_indicators_calc_effect"

	switch = {
		trigger = has_modifier
		xvcv_mdlc_world_machines_districts_heat_indicator_good = { remove_modifier = xvcv_mdlc_world_machines_districts_heat_indicator_good }
		xvcv_mdlc_world_machines_districts_heat_indicator_neutral = { remove_modifier = xvcv_mdlc_world_machines_districts_heat_indicator_neutral }
		xvcv_mdlc_world_machines_districts_heat_indicator_bad = { remove_modifier = xvcv_mdlc_world_machines_districts_heat_indicator_bad }
	}
	if = {
		limit = { check_variable = { which = xvcv_mdlc_world_machines_districts_output_var value > 0 } }
		add_modifier = { modifier = xvcv_mdlc_world_machines_districts_heat_indicator_good days = -1 }
	}
	else_if = {
		limit = { check_variable = { which = xvcv_mdlc_world_machines_districts_output_var value = 0 } }
		add_modifier = { modifier = xvcv_mdlc_world_machines_districts_heat_indicator_neutral days = -1 }
	}
	else_if = {
		limit = { check_variable = { which = xvcv_mdlc_world_machines_districts_output_var value < 0 } }
		add_modifier = { modifier = xvcv_mdlc_world_machines_districts_heat_indicator_bad days = -1 }
	}
	# Reset the display to be "100%" (1)
	set_variable = {
		which = xvcv_mdlc_world_machines_districts_current_output_for_display_var
		value = 1
	}
	# Add or subtract a decimal value (1 minus 0.1 = 0.9 )
	change_variable = {
		which = xvcv_mdlc_world_machines_districts_current_output_for_display_var
		value = xvcv_mdlc_world_machines_districts_output_var
	}
	# convert 0.1 to 10%
	multiply_variable = {
		which = xvcv_mdlc_world_machines_districts_current_output_for_display_var
		value = 100
	}

	# Check if non-resource districts need offsets (if output is below 0.0) and add them
	if = {
		limit = { xvcv_mdlc_world_machines_non_resource_district_trigger = yes }
		log = "Going into xvcv_mdlc_world_machines_recalc_non_resource_offsets_all"
		xvcv_mdlc_world_machines_recalc_non_resource_offsets_all = yes
	}
	log = "Finished xvcv_mdlc_world_machines_districts_heat_indicators_calc_effect"
}

# For any non-resource district, when thermal throttling is on, add or remove offset deposits
# If throttling is off (world machine output is 0 or above), remove offset deposits
# Takes two vars: $DISTRICT_TYPE$ and $OFFSET_DEPOSIT_TYPE$
# Deposit type is what district to add as an offset
# ASSUMPTIONS: There is at least one offset deposit, OR one district
xvcv_mdlc_world_machines_adjust_non_resource_district_offset_entry = {
	optimize_memory
	log = "Going to adjust non-resource district offsets for  $DISTRICT_TYPE$ "
	export_trigger_value_to_variable = {
		trigger = count_deposits
		parameters = { type = $OFFSET_DEPOSIT_TYPE$ }
		variable = xvcv_mdlc_num_existing_offsets_of_type
	}
	# Base the amount of offsets to add by number of districts
	# Do not add more offsets than there are districts of this type
	export_trigger_value_to_variable = {
		trigger = num_districts
		parameters = { type = $DISTRICT_TYPE$ }
		variable = xvcv_mdlc_num_existing_districts_of_type
	}
	log = "At the start of this scripted effect, there are \\[This.xvcv_mdlc_num_existing_offsets_of_type]"
	log = "At the start of this scripted effect, there are \\[This.xvcv_mdlc_num_existing_districts_of_type] districts of this type."
	# # Clear existing deposits

	# Bring out the big guns (while loop) bc there is a weird bug iterating custom district types and deleting them
	# And then I find there are still more districts added somehow after deleting them all
	while = {
		limit = {
			check_variable = {
				which = xvcv_mdlc_num_existing_offsets_of_type
				value > 0
			}
		}
		every_deposit = { limit = { is_deposit_type = $OFFSET_DEPOSIT_TYPE$ } remove_deposit = yes }
		export_trigger_value_to_variable = {
			trigger = count_deposits
			parameters = { type = $OFFSET_DEPOSIT_TYPE$ }
			variable = xvcv_mdlc_num_existing_offsets_of_type
		}
	}
	# Evaluate the current xvcv_mdlc_world_machines_districts_output_var
	# which is a decimal like -0.5 or 0.2
	if = {
		limit = {
			check_variable = {
				which = xvcv_mdlc_world_machines_districts_output_var
				value < 0
			}
		}
		# Initialize this variable
		set_variable = {
			which = xvcv_mdlc_wm_num_offsets_to_add
			value = xvcv_mdlc_num_existing_districts_of_type
		}
		# Make a copy of the output var, modify it
		set_variable = {
			which = xvcv_mdlc_wm_output_var_copy
			value = xvcv_mdlc_world_machines_districts_output_var
		}
		# There is a possible bug here, if the output is lower than -1.0, 
		# then dont add more districts to go beyond the base of what the planet produces
		# Ex: Don't add 12 offset districts, because then it will go beyond just offsetting the planet's
		# non-resource production
		# Bugfix: Set this value BEFORE multiplying it ;)
		if = {
			limit = {
				check_variable = {
					which = xvcv_mdlc_wm_output_var_copy
					value <= -1.0
				}
			}
			set_variable = {
				which = xvcv_mdlc_wm_output_var_copy
				value = -1.0
			}
			log = "The output is below -100% so not going to reduce the num of districts beyond this."
		}
		# Whatever the value is now, mult by -10 so -0.3 becomes 3...
		multiply_variable = {
			which = xvcv_mdlc_wm_output_var_copy
			value = -10
		}
		# Offset is -0.2 (2) times num of districts (1) so we'll add 2 offset deposits
		# xvcv_mdlc_wm_num_offsets_to_add 2, xvcv_mdlc_wm_output_var_copy at 1, so add 2 offsets
		# xvcv_mdlc_wm_num_offsets_to_add 4, xvcv_mdlc_wm_output_var_copy at 1, so add 4 offsets
		multiply_variable = {
			which = xvcv_mdlc_wm_num_offsets_to_add
			value = xvcv_mdlc_wm_output_var_copy
		}
		# If we calculated there are offsets to add, then add them
		if = {
			limit = {
				check_variable = {
					which = xvcv_mdlc_wm_num_offsets_to_add
					value > 0
				}
			}
			log = "Going to add \\[This.xvcv_mdlc_wm_num_offsets_to_add] offsets. World output is \\[This.xvcv_mdlc_world_machines_districts_output_var] and there are \\[This.xvcv_mdlc_num_existing_districts_of_type] existing districts of this type."
			while = {
				count = xvcv_mdlc_wm_num_offsets_to_add
				add_deposit = $OFFSET_DEPOSIT_TYPE$
			}
			log = "Added \\[This.xvcv_mdlc_wm_num_offsets_to_add]  $OFFSET_DEPOSIT_TYPE$ to this planet, \\[This.GetName]"
		}
		else = {
			log = "Didn't add any offset districts as they're not needed."
		}
	}
	else = {
		log = "Didn't add any offset districts as they're not needed."
	}
	set_variable = {
		which = xvcv_mdlc_wm_num_offsets_to_add
		value = 0
	}
	set_variable = {
		which = xvcv_mdlc_wm_output_var_copy
		value = 0
	}
	export_trigger_value_to_variable = {
		trigger = num_districts
		parameters = { type = $DISTRICT_TYPE$ }
		variable = xvcv_mdlc_num_existing_districts_of_type
	}
	log = "At the END of this scripted effect, there are \\[This.xvcv_mdlc_num_existing_offsets_of_type]"

	set_variable = {
		which = xvcv_mdlc_num_existing_districts_of_type
		value = 0
	}
}

# Big one ... called from xvcv_mdlc_world_machines_districts_heat_indicators_calc_effect
# Switch planet type and then recalculate offsets for all non-resource districts >_@
xvcv_mdlc_world_machines_recalc_non_resource_offsets_all = {
	optimize_memory
	switch = {
		trigger = is_planet_class
		xvcv_mdlc_pc_machine_ecu = {
			if = {
				limit = {
					OR = {
						has_deposit = xvcv_mdlc_d_pc_machine_ecu_naval_cap_offset
						has_district = xvcv_mdlc_pc_machine_ecu_district_naval_cap
					}
				}
				log = "Looking at world forge type, adjusting naval cap if needed ..."
				xvcv_mdlc_world_machines_adjust_non_resource_district_offset_entry = {
					DISTRICT_TYPE = xvcv_mdlc_pc_machine_ecu_district_naval_cap
					OFFSET_DEPOSIT_TYPE = xvcv_mdlc_d_pc_machine_ecu_naval_cap_offset
				}
			}
		}
		xvcv_mdlc_pc_machine_cpu = {
			if = {
				limit = {
					OR = {
						has_deposit = xvcv_mdlc_d_pc_machine_cpu_decryption_offset
						has_district = xvcv_mdlc_pc_machine_cpu_district_decryption
					}
				}
				log = "Looking at world cpu type, adjusting decryption if needed..."
				xvcv_mdlc_world_machines_adjust_non_resource_district_offset_entry = {
					DISTRICT_TYPE = xvcv_mdlc_pc_machine_cpu_district_decryption
					OFFSET_DEPOSIT_TYPE = xvcv_mdlc_d_pc_machine_cpu_decryption_offset
				}
			}
		}
		# Need to do a few if statements since there are multiple non-resource districts on server
		xvcv_mdlc_pc_machine_ser = {
			if = {
				limit = {
					OR = {
						has_deposit = xvcv_mdlc_d_pc_machine_ser_admin_cap_offset
						has_district = xvcv_mdlc_pc_machine_ser_district_admin_cap
					}
				}
				log = "Looking at world server type, adjusting admin cap district if needed ..."
				xvcv_mdlc_world_machines_adjust_non_resource_district_offset_entry = {
					DISTRICT_TYPE = xvcv_mdlc_pc_machine_ser_district_admin_cap
					OFFSET_DEPOSIT_TYPE = xvcv_mdlc_d_pc_machine_ser_admin_cap_offset
				}
			}
			if = {
				limit = {
					has_district = xvcv_mdlc_pc_machine_ser_district_crime
					owner = { has_authority = auth_machine_intelligence }
				}
				log = "Looking at world server type, adjusting deviancy district if needed ..."
				xvcv_mdlc_world_machines_adjust_non_resource_district_offset_entry = {
					DISTRICT_TYPE = xvcv_mdlc_pc_machine_ser_district_crime
					OFFSET_DEPOSIT_TYPE = xvcv_mdlc_d_pc_machine_ser_crime_offset
				}
			}
			# Happiness-related
			else_if = {
				limit = {
					has_district = xvcv_mdlc_pc_machine_ser_district_crime
					owner = { NOT = { has_authority = auth_machine_intelligence } }
				}
				xvcv_mdlc_world_machines_adjust_non_resource_district_offset_entry = {
					DISTRICT_TYPE = xvcv_mdlc_pc_machine_ser_district_crime
					OFFSET_DEPOSIT_TYPE = xvcv_mdlc_d_pc_machine_ser_crime_alt_offset
				}
			}
			if = {
				limit = {
					OR = {
						has_deposit = xvcv_mdlc_d_pc_machine_ser_encryption_offset
						has_district = xvcv_mdlc_pc_machine_ser_district_encryption
					}
				}
				log = "Looking at world server type, adjusting encryption district if needed ..."
				xvcv_mdlc_world_machines_adjust_non_resource_district_offset_entry = {
					DISTRICT_TYPE = xvcv_mdlc_pc_machine_ser_district_encryption
					OFFSET_DEPOSIT_TYPE = xvcv_mdlc_d_pc_machine_ser_encryption_offset
				}
			}
		}
	}
}

# There's a bug where clearing all deposits doesn't work on the first try
# Take CUSTOM_DEPOSIT_TYPE arg
oxr_mdlc_clear_all_custom_deposits_of_type = {
	optimize_memory
	export_trigger_value_to_variable = {
		trigger = count_deposits
		parameters = { type = $CUSTOM_DEPOSIT_TYPE$ }
		variable = xvcv_mdlc_num_existing_offsets_of_type_custom
	}
	while = {
		limit = {
			check_variable = {
				which = xvcv_mdlc_num_existing_offsets_of_type_custom
				value > 0
			}
		}
		every_deposit = { limit = { is_deposit_type = $CUSTOM_DEPOSIT_TYPE$ } remove_deposit = yes }
		export_trigger_value_to_variable = {
			trigger = count_deposits
			parameters = { type = $CUSTOM_DEPOSIT_TYPE$ }
			variable = xvcv_mdlc_num_existing_offsets_of_type_custom
		}
	}
}

xvcv_mdlc_count_districts_calculate_output_display_var = {
	# A workaround to properly export the world_machines_district_mult value
	# because export_modifier_to_variable is broken in on_district_complete in 3.12.* +
	# HOW THIS WORKS:
	# 1. Count production districts & Cooling Districts
	# 2. Process production districts
	# 3. Process cooling districts
	# 5. Mix em together
	# 4. The result is exported to xvcv_mdlc_world_machines_districts_output_var
	optimize_memory
	#log = "Beginning calculating the output display var."
	# 1
	set_variable = {
		which = xvcv_mdlc_world_machines_num_production_districts
		value = value:count_world_machines_districts_not_cooling
	}
	set_variable = {
		which = xvcv_mdlc_world_machines_num_production_districts
		value = value:count_world_machines_districts_of_type|DISTRICT_NAME|xvcv_mdlc_common_district_cooling|
	}
	#log = "There are \\[This.xvcv_mdlc_world_machines_num_cooling_districts] cooling districts"
	
	#2
	set_variable = { #because num_districts is lame
		which = xvcv_mdlc_world_machines_production_heat_penalty 
		value = xvcv_mdlc_world_machines_num_production_districts
	}
	divide_variable = { #convert 6 districts to -0.6 on the ratio
		which = xvcv_mdlc_world_machines_production_heat_penalty
		value = -10
	}
	#log = "Production penalty: \\[This.xvcv_mdlc_world_machines_production_output_penalty]"
	
	#3
	set_variable = { #because num_districts is lame
		which = xvcv_mdlc_world_machines_cooling_bonus
		value = xvcv_mdlc_world_machines_num_cooling_districts
	}
	#calculate effect of rikk_mdlc_world_machine_cooling_district_effectiveness
	set_variable = { #base of 0.3, so each cooling supports 3 non-cooling districts
		which = rikk_mdlc_world_machine_cooling_district_effect
		value = 0.3
	}
	change_variable = { #if the bonus is +15% (0.15) then result is every district does 45% cooling (0.45)
		which = rikk_mdlc_world_machine_cooling_district_effect
		value = modifier:rikk_mdlc_world_machine_cooling_district_effectiveness
	}
	multiply_variable = { #0.45*2 = 0.9
		which = xvcv_mdlc_world_machines_cooling_bonus
		value = rikk_mdlc_world_machine_cooling_district_effect
	}
	#log = "Cooling bonus: \\[This.xvcv_mdlc_world_machines_cooling_bonus]"
	
	#4
	set_variable = {
		which = xvcv_mdlc_world_machines_districts_output_var
		value = xvcv_mdlc_world_machines_production_heat_penalty
	}
	change_variable = {
		which = xvcv_mdlc_world_machines_districts_output_var
		value = xvcv_mdlc_world_machines_cooling_bonus
	}
	
	# Add the cooling district bonuses
	# ex: -0.6 plus 0.6 equals 0, a 100% production modifier
	#log = "Districts output display var calculated to be: \\[This.xvcv_mdlc_world_machines_pre_districts_output_var]"
}
